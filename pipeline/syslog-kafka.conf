input {
    tcp {
        port => 5000
        type => syslog
    }
    udp {
        port => 5000
        type => syslog
    }
}

filter {
    if [type] == "syslog" {
        grok {
            match    => { 
                "message" => [
                    # RFC 3164
                    "(?:<%{NONNEGINT:syslog_pri}>)(?:%{SYSLOGTIMESTAMP:timestamp}|%{TIMESTAMP_ISO8601:timestamp8601}) (?:%{SYSLOGFACILITY} )?%{SYSLOGHOST:syslog_hostname} %{SYSLOGPROG}: %{GREEDYDATA:syslog_message}",
                    # RFC 5424
                    "<%{NONNEGINT:syslog5424_pri}>%{NONNEGINT:syslog5424_ver} +(?:%{TIMESTAMP_ISO8601:timestamp8601}|-) +(?:%{HOSTNAME:syslog_hostname}|-) +(?:%{WORD:syslog5424_appname}|-) +(?:%{WORD:syslog5424_procid}|-) +(?:%{WORD:syslog5424_msgid}|-) +(?:\[%{DATA:syslog5424_sd}\]+|-|) +(%{GREEDYDATA:syslog_message})"
                ]
            }
            add_field => [ "received_at", "%{@timestamp}" ]
            add_field => [ "received_from", "%{host}" ]
        }
        date {
            match    => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
            timezone => "UTC"
        }

    }
    #if "_grokparsefailure" in [tags] {
    #  drop { }
    #}
}

output {
    #elasticsearch { hosts => [ "http://elasticsearch:9200" ] }
    if "_grokparsefailure" in [tags] {
        kafka { 
            bootstrap_servers => 'kafka01:9092,kafka02:9092,kafka03:9092' 
            topic_id          => 'syslog_grokparsefailure' 
            codec             => "json"
        }
    } else {
        kafka { 
            bootstrap_servers => 'kafka01:9092,kafka02:9092,kafka03:9092' 
            topic_id          => 'syslog'
            codec             => "json"
        }
    }
    #stdout { codec => rubydebug }
}
